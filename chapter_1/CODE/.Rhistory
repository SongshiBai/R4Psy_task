df.group2 <- df.clean %>%
dplyr::filter(!(subj_idx %in% id.df.group1)) %>%
dplyr::mutate(group = "B" ) #assign group id
#df.group1
#df.group2
df.indt <-rbind(df.group1, df.group2)
rm(df.group1,df.group2,id.df.group1)
bruceR::TTEST(df.clean, "rt_mean", test.value = 700, test.sided = "=")
bruceR::TTEST(df.clean , y = c("congruent", "incongruent"), paired = T)
bruceR::TTEST(df.onet, "rt_mean", test.value = 700, test.sided = "=")
bruceR::TTEST(df.pairt , y = c("congruent", "incongruent"), paired = T)
bruceR::TTEST(df.indt, "congruent", x="group")
View(df.indt)
# df for One-sample t-test
df.onet <- df.clean %>%
dplyr::filter(condition == "congruent" & acc == "1")
# df for pair t-test
df.pairt <- df.clean %>%
dplyr::select(-"rt_sd", -"n")%>%
dplyr::filter(acc == "1") %>%
tidyr::pivot_wider(names_from = condition,
values_from = rt_mean)
#df for Independent t-test
set.seed(1234)
df.group1 <-  df.clean %>%
sample_frac(0.5, replace = FALSE) %>%
dplyr::mutate(group = "A" ) #assign group id
id.df.group1 <- df.group1 %>%
dplyr::pull(subj_idx)
# id.df.group1
df.group2 <- df.clean %>%
dplyr::filter(!(subj_idx %in% id.df.group1)) %>%
dplyr::mutate(group = "B" ) #assign group id
# rbind
df.indt <-rbind(df.group1, df.group2)
# clean local variable
rm(df.group1,df.group2,id.df.group1)
View(df.indt)
# df for One-sample t-test
df.onet <- df.clean %>%
dplyr::filter(condition == "congruent" & acc == "1")
# df for pair t-test
df.pairt <- df.clean %>%
dplyr::select(-"rt_sd", -"n")%>%
dplyr::filter(acc == "1") %>%
tidyr::pivot_wider(names_from = condition,
values_from = rt_mean)
#df for Independent t-test
set.seed(1234)
df.group1 <-  df.pairt %>%
sample_frac(0.5, replace = FALSE) %>%
dplyr::mutate(group = "A" ) #assign group id
id.df.group1 <- df.group1 %>%
dplyr::pull(subj_idx)
# id.df.group1
df.group2 <- df.pairt %>%
dplyr::filter(!(subj_idx %in% id.df.group1)) %>%
dplyr::mutate(group = "B" ) #assign group id
# rbind
df.indt <-rbind(df.group1, df.group2)
# clean local variable
rm(df.group1,df.group2,id.df.group1)
View(df.indt)
bruceR::TTEST(df.onet, "rt_mean", test.value = 700, test.sided = "=")
bruceR::TTEST(df.pairt , y = c("congruent", "incongruent"), paired = T)
bruceR::TTEST(df.indt, "congruent", x="group")
bruceR::TTEST(df.onet, "rt_mean", test.value = 700, test.sided = "=")
bruceR::TTEST(df.pairt , y = c("congruent", "incongruent"), paired = T)
bruceR::TTEST(df.indt, "congruent", x="group")
bruceR::TTEST(df.onet, "rt_mean", test.value = 700, test.sided = "=")
bruceR::TTEST(df.pairt , y = c("congruent", "incongruent"), paired = T)
bruceR::TTEST(df.indt, "congruent", x="group")
# Import Pilot Data(Simulated Data)
df.raw <-  read.csv('../R_PPT/stroop_all.csv',header = T, sep=",", stringsAsFactors = FALSE)
df.clean <- df.raw %>%
dplyr::select("worker_id" ,
"condition",
"acc" = "correct",
"block_type" = "exp_stage",
"rt" ,
"trial_id",
"stim_color",
"stim_word"
) %>% #select columns we need & rename
#remove "s" in subj_idx
dplyr::mutate(subj_idx = str_remove(worker_id, pattern = "[s]")) %>%
dplyr::select(-worker_id) %>%
# dplyr::mutate(across("rt", as.numeric)) %>%
dplyr::mutate(rt = as.numeric(rt)) %>%
dplyr::mutate(across("acc", as.factor)) %>%
#remove outliers below and above 3rd sd
dplyr::filter(rt > quantile(rt, 0.0015) & rt < quantile(rt, 0.9985)) %>%
dplyr::filter(block_type == "test") %>% # only keep exp trials
dplyr::filter(!is.na(rt))  %>% #remove na in rt
dplyr::group_by(subj_idx, condition, acc) %>%
dplyr::summarise(n = n(),
rt_sd = sd(as.numeric(rt), na.rm = T),
rt_mean = mean(as.numeric(rt), na.rm = T)
) %>%
dplyr::ungroup()
head(df.clean)
# df for One-sample t-test
df.onet <- df.clean %>%
dplyr::filter(condition == "congruent" & acc == "1")
# df for pair t-test
df.pairt <- df.clean %>%
dplyr::select(-"rt_sd", -"n")%>%
dplyr::filter(acc == "1") %>%
tidyr::pivot_wider(names_from = condition,
values_from = rt_mean)
#df for Independent t-test
set.seed(1234)
df.group1 <-  df.pairt %>%
sample_frac(0.5, replace = FALSE) %>%
dplyr::mutate(group = "A" ) #assign group id
id.df.group1 <- df.group1 %>%
dplyr::pull(subj_idx)
# id.df.group1
df.group2 <- df.pairt %>%
dplyr::filter(!(subj_idx %in% id.df.group1)) %>%
dplyr::mutate(group = "B" ) #assign group id
# rbind
df.indt <-rbind(df.group1, df.group2)
# clean local variable
rm(df.group1,df.group2,id.df.group1)
bruceR::TTEST(df.onet, "rt_mean", test.value = 700, test.sided = "=")
bruceR::TTEST(df.pairt , y = c("congruent", "incongruent"), paired = T)
bruceR::TTEST(df.indt, "congruent", x="group")
# Import Pilot Data(Simulated Data)
df.raw <-  read.csv('../R_PPT/stroop_all.csv',header = T, sep=",", stringsAsFactors = FALSE)
df.t <- df.raw %>%
dplyr::select("worker_id" ,
"condition",
"acc" = "correct",
"block_type" = "exp_stage",
"rt" ,
"trial_id",
"stim_color",
"stim_word"
) %>% #select columns we need & rename
#remove "s" in subj_idx
dplyr::mutate(subj_idx = str_remove(worker_id, pattern = "[s]")) %>%
dplyr::select(-worker_id) %>%
# dplyr::mutate(across("rt", as.numeric)) %>%
dplyr::mutate(rt = as.numeric(rt)) %>%
dplyr::mutate(across("acc", as.factor)) %>%
#remove outliers below and above 3rd sd
dplyr::filter(rt > quantile(rt, 0.0015) & rt < quantile(rt, 0.9985)) %>%
dplyr::filter(block_type == "test") %>% # only keep exp trials
dplyr::filter(!is.na(rt))  %>% #remove na in rt
dplyr::group_by(subj_idx, condition, acc) %>%
dplyr::summarise(n = n(),
rt_sd = sd(as.numeric(rt), na.rm = T),
rt_mean = mean(as.numeric(rt), na.rm = T)
) %>%
dplyr::ungroup()
head(df.t)
rm(df.clean)
# df for One-sample t-test
df.t.one <- df.t %>%
dplyr::filter(condition == "congruent" & acc == "1")
# df for pair t-test
df.t.pair <- df.t %>%
dplyr::select(-"rt_sd", -"n")%>%
dplyr::filter(acc == "1") %>%
tidyr::pivot_wider(names_from = condition,
values_from = rt_mean)
#df for Independent t-test
set.seed(1234)
df.group1 <-  df.t.pair %>%
sample_frac(0.5, replace = FALSE) %>%
dplyr::mutate(group = "A" ) #assign group id
id.df.group1 <- df.group1 %>%
dplyr::pull(subj_idx)
# id.df.group1
df.group2 <- df.t.pair %>%
dplyr::filter(!(subj_idx %in% id.df.group1)) %>%
dplyr::mutate(group = "B" ) #assign group id
# rbind
df.t.ind <-rbind(df.group1, df.group2)
# clean local variable
rm(df.group1,df.group2,id.df.group1)
rm(df.onet,df.pairt,df.indt)
bruceR::TTEST(df.onet, "rt_mean", test.value = 700, test.sided = "=")
bruceR::TTEST(df.t.one, "rt_mean", test.value = 700, test.sided = "=")
bruceR::TTEST(df.t.pair , y = c("congruent", "incongruent"), paired = T)
bruceR::TTEST(df.t.ind, "congruent", x="group")
df.F <- df.raw %>%
dplyr::select("worker_id",
"condition",
"acc" = "correct",
"block_type" = "exp_stage",
"rt",
"trial_id",
"stim_color",
"stim_word") %>% #select columns we need & rename
dplyr::mutate(subj_idx = str_remove(worker_id, pattern = "[s]")) %>% #remove "s" in subj_idx:
dplyr::select(-worker_id) %>%
dplyr::filter(acc == 1) %>% #only keep correct trials
dplyr::filter(rt > quantile(rt, 0.0015) & rt < quantile(rt, 0.9985)) %>% #remove outliers below and above 3rd sd
dplyr::mutate(rt = as.numeric(rt)) %>%
dplyr::mutate(across("acc", as.factor)) %>%
dplyr::mutate(stim_color = as.factor(stim_color)) %>%
dplyr::mutate(stim_word = as.factor(stim_word)) %>%
dplyr::filter(block_type == "test") %>% #only keep exp trials
dplyr::filter(!is.na(rt)) #remove na in rt
df.F <- df.raw %>%
dplyr::select("worker_id",
"condition",
"acc" = "correct",
"block_type" = "exp_stage",
"rt",
"trial_id",
"stim_color",
"stim_word") %>% #select columns we need & rename
dplyr::mutate(subj_idx = str_remove(worker_id, pattern = "[s]")) %>% #remove "s" in subj_idx:
dplyr::select(-worker_id) %>%
dplyr::filter(acc == 1) %>% #only keep correct trials
dplyr::filter(rt > quantile(rt, 0.0015) & rt < quantile(rt, 0.9985)) %>% #remove outliers below and above 3rd sd
dplyr::mutate(rt = as.numeric(rt)) %>%
dplyr::mutate(across("acc", as.factor)) %>%
dplyr::mutate(stim_color = as.factor(stim_color)) %>%
dplyr::mutate(stim_word = as.factor(stim_word)) %>%
dplyr::filter(block_type == "test") %>% #only keep exp trials
dplyr::filter(!is.na(rt))  %>% #remove na in rt
dplyr::group_by(subj_idx, stim_word) %>%
dplyr::summarise(n = n(),
rt_sd = sd(as.numeric(rt), na.rm = T),
rt_mean = mean(as.numeric(rt), na.rm = T)) %>%
dplyr::ungroup()
df.F <- df.raw %>%
dplyr::select("worker_id",
"condition",
"acc" = "correct",
"block_type" = "exp_stage",
"rt",
"trial_id",
"stim_color",
"stim_word") %>% #select columns we need & rename
dplyr::mutate(subj_idx = str_remove(worker_id, pattern = "[s]")) %>% #remove "s" in subj_idx:
dplyr::select(-worker_id) %>%
dplyr::filter(acc == 1) %>% #only keep correct trials
dplyr::filter(rt > quantile(rt, 0.0015) & rt < quantile(rt, 0.9985)) %>% #remove outliers below and above 3rd sd
dplyr::mutate(rt = as.numeric(rt)) %>%
dplyr::mutate(across("acc", as.factor)) %>%
dplyr::mutate(stim_color = as.factor(stim_color)) %>%
dplyr::mutate(stim_word = as.factor(stim_word)) %>%
dplyr::filter(block_type == "test") %>% #only keep exp trials
dplyr::filter(!is.na(rt))  %>% #remove na in rt
dplyr::group_by(subj_idx, stim_word) %>%
dplyr::summarise(n = n(),
rt_sd = sd(as.numeric(rt), na.rm = T),
rt_mean = mean(as.numeric(rt), na.rm = T)) %>%
dplyr::ungroup()
df.F.ANOVA.within <- df.F %>%
bruceR::MANOVA(subID="subj_idx",
dv="rt_mean",
within="stim_word")
#比较正确反应试次中，三种单词刺激颜色条件下反应时间的差异
df_within <- desc %>%
bruceR::MANOVA(subID="subj_idx",
dv="rt_mean",
within="stim_word") %>%
# 若不符合球形假设要加上：sph.correction = "GG"
bruceR::EMMEANS("stim_word") # 三水平的多重比较
#比较正确反应试次中，三种单词刺激颜色条件下反应时间的差异
df.F %>%
bruceR::MANOVA(subID="subj_idx",
dv="rt_mean",
within="stim_word") %>%
# 若不符合球形假设要加上：sph.correction = "GG"
bruceR::EMMEANS("stim_word") # 三水平的多重比较
View(df.F.ANOVA.within)
#将原数据集中的被试数据随机分成3组
set.seed(1000)
group_id <- sample(1:3, length(unique(df.F$subj_idx)), replace = TRUE)
df.F.ANOVA.between <- df.F %>%
dplyr::select("subj_idx",
"stim_word",
"rt_mean") %>%
tidyr::pivot_wider(names_from = stim_word,
values_from = rt_mean) %>%
dplyr::mutate(group_id = group_id) %>%
dplyr::mutate(across("group_id", as.factor))
rm(group_id)
df.F.ANOVA.between %>%
bruceR::MANOVA(dv="red",
between = "group_id") %>%
bruceR::EMMEANS("group_id") # 三水平间多重比较
df.F.ANOVA.within <- df.raw %>%
dplyr::select("worker_id",
"condition",
"acc" = "correct",
"block_type" = "exp_stage",
"rt",
"trial_id",
"stim_color",
"stim_word") %>% #select columns we need & rename
dplyr::mutate(subj_idx = str_remove(worker_id, pattern = "[s]")) %>% #remove "s" in subj_idx:
dplyr::select(-worker_id) %>%
dplyr::filter(acc == 1) %>% #only keep correct trials
dplyr::filter(rt > quantile(rt, 0.0015) & rt < quantile(rt, 0.9985)) %>% #remove outliers below and above 3rd sd
dplyr::mutate(rt = as.numeric(rt)) %>%
dplyr::mutate(across("acc", as.factor)) %>%
dplyr::mutate(stim_color = as.factor(stim_color)) %>%
dplyr::mutate(stim_word = as.factor(stim_word)) %>%
dplyr::filter(block_type == "test") %>% #only keep exp trials
dplyr::filter(!is.na(rt))  %>% #remove na in rt
dplyr::group_by(subj_idx, stim_word) %>%
dplyr::summarise(n = n(),
rt_sd = sd(as.numeric(rt), na.rm = T),
rt_mean = mean(as.numeric(rt), na.rm = T)) %>%
dplyr::ungroup()
#比较正确反应试次中，三种单词刺激颜色条件下反应时间的差异
df.F.ANOVA.within %>%
bruceR::MANOVA(subID="subj_idx",
dv="rt_mean",
within="stim_word") %>%
# 若不符合球形假设要加上：sph.correction = "GG"
bruceR::EMMEANS("stim_word") # 三水平的多重比较
#将原数据集中的被试数据随机分成3组
set.seed(1000)
group_id <- sample(1:3, length(unique(df.F$subj_idx)), replace = TRUE)
df.F.ANOVA.between <- df.F.ANOVA.within %>%
dplyr::select("subj_idx",
"stim_word",
"rt_mean") %>%
tidyr::pivot_wider(names_from = stim_word,
values_from = rt_mean) %>%
dplyr::mutate(group_id = group_id) %>%
dplyr::mutate(across("group_id", as.factor))
rm(group_id)
df.F.ANOVA.between %>%
bruceR::MANOVA(dv="red",
between = "group_id") %>%
bruceR::EMMEANS("group_id") # 三水平间多重比较
df.F.ANOVA.within <- df.raw %>%
dplyr::select("worker_id",
"condition",
"acc" = "correct",
"block_type" = "exp_stage",
"rt",
"trial_id",
"stim_color",
"stim_word") %>% #select columns we need & rename
dplyr::mutate(subj_idx = str_remove(worker_id, pattern = "[s]")) %>% #remove "s" in subj_idx:
dplyr::select(-worker_id) %>%
dplyr::filter(acc == 1) %>% #only keep correct trials
dplyr::filter(rt > quantile(rt, 0.0015) & rt < quantile(rt, 0.9985)) %>% #remove outliers below and above 3rd sd
dplyr::mutate(rt = as.numeric(rt)) %>%
dplyr::mutate(across("acc", as.factor)) %>%
dplyr::mutate(stim_color = as.factor(stim_color)) %>%
dplyr::mutate(stim_word = as.factor(stim_word)) %>%
dplyr::filter(block_type == "test") %>% #only keep exp trials
dplyr::filter(!is.na(rt))  %>% #remove na in rt
dplyr::group_by(subj_idx, stim_word) %>%
dplyr::summarise(n = n(),
rt_sd = sd(as.numeric(rt), na.rm = T),
rt_mean = mean(as.numeric(rt), na.rm = T)) %>%
dplyr::ungroup()
#将原数据集中的被试数据随机分成3组
set.seed(1000)
group_id <- sample(1:3, length(unique(df.F$subj_idx)), replace = TRUE)
df.F.ANOVA.between <- df.F.ANOVA.within %>%
dplyr::select("subj_idx",
"stim_word",
"rt_mean") %>%
tidyr::pivot_wider(names_from = stim_word,
values_from = rt_mean) %>%
dplyr::mutate(group_id = group_id) %>%
dplyr::mutate(across("group_id", as.factor))
rm(group_id)
#比较正确反应试次中，三种单词刺激颜色条件下反应时间的差异
df.F.ANOVA.within %>%
bruceR::MANOVA(subID="subj_idx",
dv="rt_mean",
within="stim_word") %>%
# 若不符合球形假设要加上：sph.correction = "GG"
bruceR::EMMEANS("stim_word") # 三水平的多重比较
# df.F.ANOVA.within
df.F.ANOVA.within <- df.raw %>%
dplyr::select("worker_id",
"condition",
"acc" = "correct",
"block_type" = "exp_stage",
"rt",
"trial_id",
"stim_color",
"stim_word") %>% #select columns we need & rename
dplyr::mutate(subj_idx = str_remove(worker_id, pattern = "[s]")) %>% #remove "s" in subj_idx:
dplyr::select(-worker_id) %>%
dplyr::filter(acc == 1) %>% #only keep correct trials
dplyr::filter(rt > quantile(rt, 0.0015) & rt < quantile(rt, 0.9985)) %>% #remove outliers below and above 3rd sd
dplyr::mutate(rt = as.numeric(rt)) %>%
dplyr::mutate(across("acc", as.factor)) %>%
dplyr::mutate(stim_color = as.factor(stim_color)) %>%
dplyr::mutate(stim_word = as.factor(stim_word)) %>%
dplyr::filter(block_type == "test") %>% #only keep exp trials
dplyr::filter(!is.na(rt))  %>% #remove na in rt
dplyr::group_by(subj_idx, stim_word) %>%
dplyr::summarise(n = n(),
rt_sd = sd(as.numeric(rt), na.rm = T),
rt_mean = mean(as.numeric(rt), na.rm = T)) %>%
dplyr::ungroup()
# df.F.ANOVA.between
#将原数据集中的被试数据随机分成3组
set.seed(1000)
group_id <- sample(1:3, length(unique(df.F$subj_idx)), replace = TRUE)
df.F.ANOVA.between <- df.F.ANOVA.within %>%
dplyr::select("subj_idx",
"stim_word",
"rt_mean") %>%
tidyr::pivot_wider(names_from = stim_word,
values_from = rt_mean) %>%
dplyr::mutate(group_id = group_id) %>%
dplyr::mutate(across("group_id", as.factor))
rm(group_id)
# Import Pilot Data(Simulated Data)
df.raw <-  read.csv('../R_PPT/stroop_all.csv',header = T, sep=",", stringsAsFactors = FALSE)
df.t <- df.raw %>%
dplyr::select("worker_id" ,
"condition",
"acc" = "correct",
"block_type" = "exp_stage",
"rt" ,
"trial_id",
"stim_color",
"stim_word"
) %>% #select columns we need & rename
#remove "s" in subj_idx
dplyr::mutate(subj_idx = str_remove(worker_id, pattern = "[s]")) %>%
dplyr::select(-worker_id) %>%
# dplyr::mutate(across("rt", as.numeric)) %>%
dplyr::mutate(rt = as.numeric(rt)) %>%
dplyr::mutate(across("acc", as.factor)) %>%
#remove outliers below and above 3rd sd
dplyr::filter(rt > quantile(rt, 0.0015) & rt < quantile(rt, 0.9985)) %>%
dplyr::filter(block_type == "test") %>% # only keep exp trials
dplyr::filter(!is.na(rt))  %>% #remove na in rt
dplyr::group_by(subj_idx, condition, acc) %>%
dplyr::summarise(n = n(),
rt_sd = sd(as.numeric(rt), na.rm = T),
rt_mean = mean(as.numeric(rt), na.rm = T)
) %>%
dplyr::ungroup()
df.t <- df.raw %>%
dplyr::select("worker_id" ,
"condition",
"acc" = "correct",
"block_type" = "exp_stage",
"rt" ,
"trial_id",
"stim_color",
"stim_word"
) %>% #select columns we need & rename
#remove "s" in subj_idx
dplyr::mutate(subj_idx = str_remove(worker_id, pattern = "[s]")) %>%
dplyr::select(-worker_id) %>%
# dplyr::mutate(across("rt", as.numeric)) %>%
dplyr::mutate(rt = as.numeric(rt)) %>%
dplyr::mutate(across("acc", as.factor)) %>%
#remove outliers below and above 3rd sd
dplyr::filter(rt > quantile(rt, 0.0015) & rt < quantile(rt, 0.9985)) %>%
dplyr::filter(block_type == "test") %>% # only keep exp trials
dplyr::filter(!is.na(rt))  %>% #remove na in rt
dplyr::group_by(subj_idx, condition, acc) %>%
dplyr::summarise(n = n(),
rt_sd = sd(as.numeric(rt), na.rm = T),
rt_mean = mean(as.numeric(rt), na.rm = T)
) %>%
dplyr::ungroup()
rm(df.F)
View(df.F.ANOVA.within)
View(df.F.ANOVA.between)
View(df.t.pair)
View(df.t.ind)
View(df.t.one)
View(df.t)
lm_result <- lm(rt_mean ~ condition + acc + n, data = df.t)
summary(lm_result)
options(scipen=999)
lm_result <- lm(rt_mean ~ condition + acc + n, data = df.t)
summary(lm_result)
View(df.t.one)
View(df.t.pair)
View(df.t.ind)
View(df.F.ANOVA.within)
View(df.F.ANOVA.between)
df.F.ANOVA.between %>%
bruceR::MANOVA(dv="red",
between = "group_id") %>%
bruceR::EMMEANS("group_id") # 三水平间多重比较
library(tidyverse)
library(here)
library(bruceR)
library(BayesFactor)
options(scipen=999)
df.F.ANOVA.between %>%
bruceR::MANOVA(dv="red",
between = "group_id") %>%
bruceR::EMMEANS("group_id") # 三水平间多重比较
View(df.t)
lm_result <- lm(rt_mean ~ condition + acc + condition*acc, data = df.t)
summary(lm_result)
lm_result <- lm(rt_mean ~  condition*acc, data = df.t)
summary(lm_result)
lm_result <- lm(rt_mean ~ condition + acc + condition*acc, data = df.t)
summary(lm_result)
View(df.F.ANOVA.within)
lm_result <- lm(rt_mean ~ stim_word + n + stim_word*n, data = df.F.ANOVA.within)
summary(lm_result)
View(df.raw)
