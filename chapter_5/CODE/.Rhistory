df.clean.separate <- df.mt.raw %>%
tidyr::separate(., col = Shape, into = c("Shape_moral", "Shape_self"), sep = "(?<=moral|immoral)(?=Self|Other)") %>%
tidyr::separate(., col = Label, into = c("Label_moral", "Label_self"), sep = "(?<=moral|immoral)(?=Self|Other)") %>%
dplyr::select(Subject, Shape_moral, Shape_self, Label_moral, Label_self, everything())
DT::datatable(head(df.clean.separate, 5),
fillContainer = TRUE, options = list(pageLength = 5))
df.clean.wide <- df.mt.raw %>%
tidyr::pivot_wider(names_from = "Trial", values_from = "RT")  %>%
df.clean.wide <- df.mt.raw %>%
tidyr::pivot_wider(names_from = "Trial", values_from = "RT")
View(df.clean.wide)
df.clean.wide <- df.mt.raw %>%
dplyr::select(Subject, Trial, RT) %>%
tidyr::pivot_wider(names_from = "Trial", values_from = "RT")
df.clean.wide <- df.mt.raw %>%
dplyr::select(Subject, Bin, Trial, RT) %>%
tidyr::pivot_wider(names_from = "Trial", values_from = "RT")
df.clean.wide <- df.mt.raw %>%
dplyr::select(Subject, Bin, Trial, RT)
df.clean.wide <- df.mt.raw %>%
dplyr::select(Subject, Bin, Trial, RT) %>%
tidyr::pivot_wider(names_from = "Trial", values_from = "RT")
df.clean.wide <- df.mt.raw %>%
dplyr::select(Subject, Block, Bin, Trial, RT) %>%
tidyr::pivot_wider(names_from = "Trial", values_from = "RT")
DT::datatable(head(df.clean.wide, 10),
fillContainer = TRUE, options = list(pageLength = 3))
df.clean.wide <- df.mt.raw %>%
dplyr::select(Subject, Block, Bin, Trial, RT) %>%
tidyr::pivot_wider(names_from = "Trial", values_from = "RT")
df.clean.long <- df.clean.wide %>%
tidyr::pivot_longer(cols = 4:27,
names_to = "Trial",
values_to = "RT")
DT::datatable(head(df.clean.long, 10),
fillContainer = TRUE, options = list(pageLength = 3))
DT::datatable(head(df.clean.long, 24),
fillContainer = TRUE, options = list(pageLength = 3))
DT::datatable(head(df.clean.long, 48),
fillContainer = TRUE, options = list(pageLength = 3))
df.clean.extract <- df.mt.raw %>%
tidyr::extract(Shape, into = c("Shape_moral", "Shape_self"),
regex = "(moral|immoral)(Self|Other)", remove = FALSE) %>%
tidyr::extract(Label, into = c("Label_moral", "Label_self"),
regex = "(moral|immoral)(Self|Other)", remove = FALSE) %>%
dplyr::select(Subject, Shape_moral, Shape_self, Label_moral, Label_self, everything())
DT::datatable(head(df.clean.extract, 10),
fillContainer = TRUE, options = list(pageLength = 3))
View(df.clean.extract)
View(df.clean.separate)
df.clean.unite <- df.clean.separate %>%
tidyr::unite(Shape, Shape_moral, Shape_self, sep = "") %>%
tidyr::unite(Label, Label_moral, Label_self, sep = "")
DT::datatable(head(df.clean.unite, 10),
fillContainer = TRUE, options = list(pageLength = 3))
```
DT::datatable(head(df.clean.unite, 10),
fillContainer = TRUE, options = list(pageLength = 3))
df.clean.drou_na <- df.mt.raw %>%
tidyr::drop_na()
# 所有路径使用相对路径
library(here)
# 包含了dplyr和%>%等好用的包的集合
library(tidyverse)
df.clean.drou_na <- df.mt.raw %>%
tidyr::drop_na()
View(df.mt.raw)
The number of observations in `df.clean.drou_na` is `r nrow(df.clean.drou_na)`
pring("原始数据集有",nrow(df.mt.raw),"行")
print("原始数据集有",nrow(df.mt.raw),"行")
print("原始数据集有", nrow(df.mt.raw), "行")
paste("原始数据集有", nrow(df.mt.raw), "行")
paste("删除缺失值后有", nrow(df.clean.drou_na), "行")
paste("原始数据集有", nrow(df.mt.raw), "行")
paste("删除缺失值后有", nrow(df.clean.drou_na), "行")
# 实际操作中，可能粗暴的删除所有含有缺失值的行并不妥
# 因此建议通过dplyr::的filter来筛选出合格的被试（行）
# 然后再用tidyr::is.na()来检验是否还存在缺失值
any(tidyr::is.na(df.mt.raw))
paste("原始数据集有", nrow(df.mt.raw), "行")
paste("删除缺失值后有", nrow(df.clean.drou_na), "行")
# 实际操作中，可能粗暴的删除所有含有缺失值的行并不妥
# 因此建议通过dplyr::的filter来筛选出合格的被试（行）
# 然后再用tidyr::is.na()来检验是否还存在缺失值
any(is.na(df.mt.raw))
sum(is.na(df.mt.raw))
paste("原始数据集有", nrow(df.mt.raw), "行")
paste("删除缺失值后有", nrow(df.clean.drou_na), "行")
# 实际操作中，可能粗暴的删除所有含有缺失值的行并不妥
# 因此建议通过dplyr::的filter来筛选出合格的被试（行）
# 然后再用is.na()来检验是否还存在缺失值
any(is.na(df.mt.raw))
sum(is.na(df.mt.raw))
any(is.na(df.clean.drou_na))
paste("原始数据集有", nrow(df.mt.raw), "行")
paste("删除缺失值后有", nrow(df.clean.drou_na), "行")
# 实际操作中，可能粗暴的删除所有含有缺失值的行并不妥
# 因此建议通过dplyr::的filter来筛选出合格的被试（行）
# 然后再用is.na()来检验是否还存在缺失值
any(is.na(df.mt.raw))
sum(is.na(df.mt.raw))
any(is.na(df.clean.drou_na))
sum(is.na(df.clean.drou_na))
paste("原始数据集有", nrow(df.mt.raw), "行")
paste("删除缺失值后有", nrow(df.clean.drou_na), "行")
# 实际操作中，可能粗暴的删除所有含有缺失值的行并不妥
# 因此建议通过dplyr::的filter来筛选出合格的被试（行）
# 然后再用is.na()来检验是否还存在缺失值
any(is.na(df.mt.raw))
sum(is.na(df.mt.raw))
paste("原始数据集有", nrow(df.mt.raw), "行")
paste("删除缺失值后有", nrow(df.clean.drou_na), "行")
# 实际操作中，可能粗暴的删除所有含有缺失值的行并不妥
# 因此建议通过dplyr::的filter来筛选出合格的被试（行）
# 然后再用is.na()来检验是否还存在缺失值
any(is.na(df.mt.raw)) sum(is.na(df.mt.raw))
paste("原始数据集有", nrow(df.mt.raw), "行")
paste("删除缺失值后有", nrow(df.clean.drou_na), "行")
# 实际操作中，可能粗暴的删除所有含有缺失值的行并不妥
# 因此建议通过dplyr::的filter来筛选出合格的被试（行）
# 然后再用is.na()来检验是否还存在缺失值
any(is.na(df.mt.raw)); sum(is.na(df.mt.raw))
View(df.clean.extract)
df.mt.clean <- df.mt.raw %>%
tidyr::extract(Shape, into = c("Shape_moral", "Shape_self"),
regex = "(moral|immoral)(Self|Other)", remove = FALSE) %>%
tidyr::extract(Label, into = c("Label_moral", "Label_self"),
regex = "(moral|immoral)(Self|Other)", remove = FALSE) %>%
dplyr::select(Subject, Shape_moral, Block, Bin, Trial, RT)
View(df.mt.clean)
df.mt.clean <- df.mt.raw %>%
tidyr::extract(Shape, into = c("Shape_moral", "Shape_self"),
regex = "(moral|immoral)(Self|Other)", remove = FALSE) %>%
tidyr::extract(Label, into = c("Label_moral", "Label_self"),
regex = "(moral|immoral)(Self|Other)", remove = FALSE) %>%
dplyr::select(Subject, Shape_moral, Block, Bin, Trial, RT) %>%
tidyr::pivot_wider(names_from = "Shape_moral", values_from = "RT")
df.mt.clean <- df.mt.raw %>%
tidyr::extract(Shape, into = c("Shape_moral", "Shape_self"),
regex = "(moral|immoral)(Self|Other)", remove = FALSE) %>%
tidyr::extract(Label, into = c("Label_moral", "Label_self"),
regex = "(moral|immoral)(Self|Other)", remove = FALSE) %>%
dplyr::select(Subject, Shape_moral, Block, Bin, RT) %>%
tidyr::pivot_wider(names_from = "Shape_moral", values_from = "RT")
df.mt.clean <- df.mt.raw %>%
tidyr::extract(Shape, into = c("Shape_moral", "Shape_self"),
regex = "(moral|immoral)(Self|Other)", remove = FALSE) %>%
tidyr::extract(Label, into = c("Label_moral", "Label_self"),
regex = "(moral|immoral)(Self|Other)", remove = FALSE) %>%
dplyr::select(Subject, Shape_moral, Block, Bin, Trial, RT) %>%
tidyr::pivot_wider(names_from = "Shape_moral", values_from = "RT")
df.mt.clean <- df.mt.raw %>%
tidyr::extract(Shape, into = c("Shape_moral", "Shape_self"),
regex = "(moral|immoral)(Self|Other)", remove = FALSE) %>%
tidyr::extract(Label, into = c("Label_moral", "Label_self"),
regex = "(moral|immoral)(Self|Other)", remove = FALSE) %>%
dplyr::select(Subject, Shape_moral, Block, Bin, Trial, RT)
df.mt.clean <- df.mt.raw %>%
tidyr::extract(Shape, into = c("Shape_moral", "Shape_self"),
regex = "(moral|immoral)(Self|Other)", remove = FALSE) %>%
tidyr::extract(Label, into = c("Label_moral", "Label_self"),
regex = "(moral|immoral)(Self|Other)", remove = FALSE) %>%
dplyr::select(Date, Shape_moral, RT) %>%
tidyr::pivot_wider(names_from = "Shape_moral", values_from = "RT")
df.mt.clean <- df.mt.raw %>%
tidyr::unite(Shape, Label, Match, sep = "")
df.mt.clean <- df.mt.raw %>%
dplyr::select(Subject, Age, Sex, Hand,
Block, Bin, Trial,
Shape, Label, Match,
Resp, ACC, RT,
Morality, Identity) %>%
dplyr::filter(., ACC != "-1")
sum(is.na(df.mt.clean))
df.mt.clean <- df.mt.raw %>%
dplyr::select(Subject, Age, Sex, Hand, #人口统计学
Block, Bin, Trial, # 试次
Shape, Label, Match, # 刺激
Resp, ACC, RT, # 反应结果
Morality, Identity # 自变量
) %>%
dplyr::filter(Hand = "R", # 选择右利手被试
ACC != "-1" # 删除缺失值（无效应答试次）
) %>%
dplyr::group_by(Morality, Identity) %>%
dplyr::summarise(mean_ACC = mean(ACC),
mean_RT = mean(RT))
df.mt.clean <- df.mt.raw %>%
dplyr::select(Subject, Age, Sex, Hand, #人口统计学
Block, Bin, Trial, # 试次
Shape, Label, Match, # 刺激
Resp, ACC, RT, # 反应结果
Morality, Identity # 自变量
) %>%
dplyr::filter(.,Hand = "R", # 选择右利手被试
ACC != "-1" # 删除缺失值（无效应答试次）
) %>%
dplyr::group_by(Morality, Identity) %>%
dplyr::summarise(mean_ACC = mean(ACC),
mean_RT = mean(RT))
df.mt.clean <- df.mt.raw %>%
dplyr::select(Subject, Age, Sex, Hand, #人口统计学
Block, Bin, Trial, # 试次
Shape, Label, Match, # 刺激
Resp, ACC, RT, # 反应结果
Morality, Identity # 自变量
) %>%
dplyr::filter(.,Hand == "R", # 选择右利手被试
ACC !== "-1" # 删除缺失值（无效应答试次）
df.mt.clean <- df.mt.raw %>%
dplyr::select(Subject, Age, Sex, Hand, #人口统计学
Block, Bin, Trial, # 试次
Shape, Label, Match, # 刺激
Resp, ACC, RT, # 反应结果
Morality, Identity # 自变量
) %>%
dplyr::filter(.,Hand == "R", # 选择右利手被试
ACC != "-1" # 删除缺失值（无效应答试次）
) %>%
dplyr::group_by(Morality, Identity) %>%
dplyr::summarise(mean_ACC = mean(ACC),
mean_RT = mean(RT))
df.mt.clean <- df.mt.raw %>%
dplyr::select(Subject, Age, Sex, Hand, #人口统计学
Block, Bin, Trial, # 试次
Shape, Label, Match, # 刺激
Resp, ACC, RT, # 反应结果
Morality, Identity # 自变量
) %>%
dplyr::filter(.,Hand == "R", # 选择右利手被试
ACC != "-1" # 删除缺失值（无效应答试次）
) %>%
dplyr::group_by(Subeject, Morality, Identity) %>%
dplyr::summarise(mean_ACC = mean(ACC),
mean_RT = mean(RT))
df.mt.clean <- df.mt.raw %>%
dplyr::select(Subject, Age, Sex, Hand, #人口统计学
Block, Bin, Trial, # 试次
Shape, Label, Match, # 刺激
Resp, ACC, RT, # 反应结果
Morality, Identity # 自变量
) %>%
dplyr::filter(.,Hand == "R", # 选择右利手被试
ACC != "-1" # 删除缺失值（无效应答试次）
) %>%
dplyr::group_by(Subject, Morality, Identity) %>%
dplyr::summarise(mean_ACC = mean(ACC),
mean_RT = mean(RT))
df.mt.clean <- df.mt.raw %>%
dplyr::select(Subject, Age, Sex, Hand, #人口统计学
Block, Bin, Trial, # 试次
Shape, Label, Match, # 刺激
Resp, ACC, RT, # 反应结果
Morality, Identity # 自变量
) %>%
dplyr::filter(.,Hand == "R", # 选择右利手被试
ACC != "-1" # 删除缺失值（无效应答试次）
) %>%
dplyr::group_by(Subject, Morality, Identity) %>%
dplyr::summarise(mean_ACC = mean(ACC),
mean_RT = mean(RT)) %>%
dplyr::ungroup()
df.mt.clean <- df.mt.raw %>%
dplyr::select(Subject, Age, Sex, Hand, #人口统计学
Block, Bin, Trial, # 试次
Shape, Label, Match, # 刺激
Resp, ACC, RT, # 反应结果
Morality, Identity # 自变量
) %>%
dplyr::filter(.,Hand == "R", # 选择右利手被试
ACC != "-1" # 删除缺失值（无效应答试次）
) %>%
dplyr::group_by(Subject, Morality, Identity) %>%
dplyr::summarise(mean_ACC = mean(ACC),
mean_RT = mean(RT)) %>%
dplyr::ungroup()
DT::datatable(head(df.mt.clean, 24),
fillContainer = TRUE, options = list(pageLength = 3))
DT::datatable(head(df.mt.clean, 24),
fillContainer = TRUE, options = list(pageLength = 4))
View(df.mt.raw)
df.mt.clean <- df.mt.raw %>%
dplyr::select(Subject, Age, Sex, Hand, #人口统计学
Block, Bin, Trial, # 试次
Shape, Label, Match, # 刺激
Resp, ACC, RT, # 反应结果
Morality, Identity # 自变量
) %>%
dplyr::filter(.,Hand == "R", # 选择右利手被试
ACC != "-1" # 删除缺失值（无效应答试次）
) %>%
dplyr::group_by(Subject, Morality, Identity) %>%
dplyr::summarise(mean_ACC = mean(ACC),
mean_RT = mean(RT)) %>%
dplyr::ungroup() %>%
dplyr::mutate(efficiency = mean_RT/mean_ACC)
df.mt.clean <- df.mt.clean %>%
tidyr::unite(M_I, Morality, Identity, sep = "") %>%
tidyr::pivot_wider(names_from = "M_I", values_from = "efficiency")
df.mt.clean <- df.mt.raw %>%
dplyr::select(Subject, Age, Sex, Hand, #人口统计学
Block, Bin, Trial, # 试次
Shape, Label, Match, # 刺激
Resp, ACC, RT, # 反应结果
Morality, Identity # 自变量
) %>%
dplyr::filter(.,Hand == "R", # 选择右利手被试
ACC != "-1" # 删除缺失值（无效应答试次）
) %>%
dplyr::group_by(Subject, Morality, Identity) %>%
dplyr::summarise(mean_ACC = mean(ACC),
mean_RT = mean(RT)) %>%
dplyr::ungroup() %>%
dplyr::mutate(efficiency = mean_RT/mean_ACC)
df.mt.clean <- df.mt.clean %>%
dplyr::select(-mean_ACC, -mean_RT)
tidyr::unite(M_I, Morality, Identity, sep = "") %>%
tidyr::pivot_wider(names_from = "M_I", values_from = "efficiency")
df.mt.clean <- df.mt.clean %>%
dplyr::select(Subject, Morality, Identity, efficiency) %>%
tidyr::unite(M_I, Morality, Identity, sep = "") %>%
tidyr::pivot_wider(names_from = "M_I", values_from = "efficiency")
DT::datatable(head(df.mt.clean, 24),
fillContainer = TRUE, options = list(pageLength = 4))
df.mt.clean <- df.mt.raw %>%
dplyr::select(Subject, Age, Sex, Hand, #人口统计学
Block, Bin, Trial, # 试次
Shape, Label, Match, # 刺激
Resp, ACC, RT, # 反应结果
Morality, Identity # 自变量
) %>%
dplyr::filter(.,Hand == "R", # 选择右利手被试
ACC != "-1" # 删除缺失值（无效应答试次）
) %>%
dplyr::group_by(Subject, Shape, Match) %>%
dplyr::summarise(mean_ACC = mean(ACC),
mean_RT = mean(RT)) %>%
dplyr::ungroup() %>%
dplyr::mutate(efficiency = mean_RT/mean_ACC)
df.mt.clean <- df.mt.raw %>%
dplyr::select(Subject, Age, Sex, Hand, #人口统计学
Block, Bin, Trial, # 试次
Shape, Label, Match, # 刺激
Resp, ACC, RT, # 反应结果
Morality, Identity # 自变量
) %>%
dplyr::filter(.,Hand == "R", # 选择右利手被试
ACC != "-1" # 删除缺失值（无效应答试次）
) %>%
dplyr::group_by(Subject, Shape, Label, Match) %>%
dplyr::summarise(mean_ACC = mean(ACC),
mean_RT = mean(RT)) %>%
dplyr::ungroup() %>%
dplyr::mutate(efficiency = mean_RT/mean_ACC)
df.mt.clean <- df.mt.raw %>%
dplyr::select(Subject, Age, Sex, Hand, #人口统计学
Block, Bin, Trial, # 试次
Shape, Label, Match, # 刺激
Resp, ACC, RT, # 反应结果
Morality, Identity # 自变量
) %>%
dplyr::filter(.,Hand == "R", # 选择右利手被试
ACC != "-1" # 删除缺失值（无效应答试次）
) %>%
dplyr::group_by(Subject, Shape, Label, Match) %>%
dplyr::summarise(mean_ACC = mean(ACC),
mean_RT = mean(RT)) %>%
dplyr::ungroup() %>%
dplyr::mutate(efficiency = mean_RT/mean_ACC) %>%
df.mt.clean <- df.mt.raw %>%
dplyr::select(Subject, Age, Sex, Hand, #人口统计学
Block, Bin, Trial, # 试次
Shape, Label, Match, # 刺激
Resp, ACC, RT, # 反应结果
Morality, Identity # 自变量
) %>%
dplyr::filter(.,Hand == "R", # 选择右利手被试
ACC != "-1" # 删除缺失值（无效应答试次）
) %>%
dplyr::group_by(Subject, Shape, Label, Match) %>%
dplyr::summarise(mean_ACC = mean(ACC),
mean_RT = mean(RT)) %>%
dplyr::ungroup() %>%
dplyr::mutate(efficiency = mean_RT/mean_ACC) %>%
df.mt.clean <- df.mt.raw %>%
dplyr::select(Subject, Age, Sex, Hand, #人口统计学
Block, Bin, Trial, # 试次
Shape, Label, Match, # 刺激
Resp, ACC, RT, # 反应结果
Morality, Identity # 自变量
) %>%
dplyr::filter(.,Hand == "R", # 选择右利手被试
ACC != "-1" # 删除缺失值（无效应答试次）
) %>%
dplyr::group_by(Subject, Shape, Label, Match) %>%
dplyr::summarise(mean_ACC = mean(ACC),
mean_RT = mean(RT)) %>%
dplyr::ungroup() %>%
dplyr::mutate(efficiency = mean_RT/mean_ACC)
df.mt.clean <- df.mt.raw %>%
dplyr::select(Subject, Age, Sex, Hand, #人口统计学
Block, Bin, Trial, # 试次
Shape, Label, Match, # 刺激
Resp, ACC, RT, # 反应结果
Morality, Identity # 自变量
) %>%
dplyr::filter(.,Hand == "R", # 选择右利手被试
ACC != "-1" # 删除缺失值（无效应答试次）
) %>%
dplyr::group_by(Subject, Shape, Label, Match, Morality, Identity) %>%
dplyr::summarise(mean_ACC = mean(ACC),
mean_RT = mean(RT)) %>%
dplyr::ungroup() %>%
dplyr::mutate(efficiency = mean_RT/mean_ACC)
DT::datatable(head(df.mt.clean, 24),
fillContainer = TRUE, options = list(pageLength = 8))
df.mt.clean <- df.mt.clean %>%
dplyr::filter(Match == match) %>%
# 自我优势效应一般讨论的是匹配条件下
# 人们对自己相关的信息反应快于非自我相关的
tidyr::extract(Shape, into = c("Shape_moral", "Shape_self"),
regex = "(moral|immoral)(Self|Other)", remove = FALSE) %>%
tidyr::extract(Label, into = c("Label_moral", "Label_self"),
regex = "(moral|immoral)(Self|Other)", remove = FALSE) %>%
tidyr::unite(M_I, Morality, Identity, sep = "") %>%
df.mt.clean <- df.mt.clean %>%
dplyr::filter(Match == match) %>%
# 自我优势效应一般讨论的是匹配条件下
# 人们对自己相关的信息反应快于非自我相关的
tidyr::extract(Shape, into = c("Shape_moral", "Shape_self"),
regex = "(moral|immoral)(Self|Other)", remove = FALSE) %>%
tidyr::extract(Label, into = c("Label_moral", "Label_self"),
regex = "(moral|immoral)(Self|Other)", remove = FALSE) %>%
tidyr::unite(M_I, Morality, Identity, sep = "")
df.mt.clean <- df.mt.clean %>%
dplyr::filter(Match == "match") %>%
# 自我优势效应一般讨论的是匹配条件下
# 人们对自己相关的信息反应快于非自我相关的
tidyr::extract(Shape, into = c("Shape_moral", "Shape_self"),
regex = "(moral|immoral)(Self|Other)", remove = FALSE) %>%
tidyr::extract(Label, into = c("Label_moral", "Label_self"),
regex = "(moral|immoral)(Self|Other)", remove = FALSE) %>%
tidyr::unite(M_I, Morality, Identity, sep = "")
df.mt.clean <- df.mt.clean %>%
tidyr::pivot_wider(names_from = "M_I", values_from = "efficiency")
df.mt.clean <- df.mt.clean %>%
dplyr::select(Subject, Shape, efficienty)
df.mt.clean <- df.mt.raw %>%
dplyr::select(Subject, Age, Sex, Hand, #人口统计学
Block, Bin, Trial, # 试次
Shape, Label, Match, # 刺激
Resp, ACC, RT, # 反应结果
Morality, Identity # 自变量
) %>%
dplyr::filter(.,Hand == "R", # 选择右利手被试
ACC != "-1" # 删除缺失值（无效应答试次）
) %>%
dplyr::group_by(Subject,
Shape, Label, Match,
Morality, Identity) %>%
dplyr::summarise(mean_ACC = mean(ACC),
mean_RT = mean(RT)) %>%
dplyr::ungroup() %>%
dplyr::mutate(efficiency = mean_RT/mean_ACC)
df.mt.clean <- df.mt.clean %>%
dplyr::filter(Match == "match") %>%
# 自我优势效应一般讨论的是匹配条件下
# 人们对自己相关的信息反应快于非自我相关的
tidyr::extract(Shape, into = c("Shape_moral", "Shape_self"),
regex = "(moral|immoral)(Self|Other)", remove = FALSE) %>%
tidyr::extract(Label, into = c("Label_moral", "Label_self"),
regex = "(moral|immoral)(Self|Other)", remove = FALSE) %>%
tidyr::unite(M_I, Morality, Identity, sep = "")
df.mt.clean <- df.mt.clean %>%
dplyr::select(Subject, Shape, efficienty)
df.mt.clean <- df.mt.clean %>%
dplyr::select(Subject, Shape, efficiency)
tidyr::pivot_wider(names_from = "Shape", values_from = "efficiency")
df.mt.clean <- df.mt.clean %>%
dplyr::select(Subject, Shape, efficiency) %>%
tidyr::pivot_wider(names_from = "Shape", values_from = "efficiency")
DT::datatable(head(df.mt.clean, 24),
fillContainer = TRUE, options = list(pageLength = 8))
rm(df.raw.long,df.raw.wide)
df.mt.clean <- df.mt.raw %>%
dplyr::select(Subject, Age, Sex, Hand, #人口统计学
Block, Bin, Trial, # 试次
Shape, Label, Match, # 刺激
Resp, ACC, RT, # 反应结果
Morality, Identity # 自变量
) %>%
dplyr::filter(.,Hand == "R", # 选择右利手被试
ACC != "-1" # 删除缺失值（无效应答试次）
) %>%
dplyr::group_by(Subject,
Shape, Label, Match,
Morality, Identity) %>%
dplyr::summarise(mean_ACC = mean(ACC),
mean_RT = mean(RT)) %>%
dplyr::ungroup() %>%
dplyr::mutate(efficiency = mean_RT/mean_ACC) %>%
dplyr::filter(Match == "match") %>%
# 自我优势效应一般讨论的是匹配条件下
# 人们对自己相关的信息反应快于非自我相关的
tidyr::extract(Shape, into = c("Shape_moral", "Shape_self"),
regex = "(moral|immoral)(Self|Other)", remove = FALSE) %>%
tidyr::extract(Label, into = c("Label_moral", "Label_self"),
regex = "(moral|immoral)(Self|Other)", remove = FALSE) %>%
tidyr::unite(M_I, Morality, Identity, sep = "") %>%
dplyr::select(Subject, Shape, efficiency) %>%
tidyr::pivot_wider(names_from = "Shape", values_from = "efficiency")
View(df.mt.clean)
