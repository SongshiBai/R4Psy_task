WD <-  here::here()
knitr::opts_knit$set(root.dir = 'cur_dir')
getwd()
remotes::install_github('yihui/xaringan')
library(devtools)
remotes::install_github('yihui/xaringan')
if (!requireNamespace("xaringan"))
remotes::install_github("yihui/xaringan")
if (!requireNamespace("xaringan"))
remotes::install_github("yihui/xaringan")
githubinstall(xaringan)
install_github(yihui/xaringan)
install_github("yihui/xaringan")
install_github("yihui/xaringan")
remotes::install_github('yihui/xaringan')
remotes::install_github('yihui/xaringan')
remotes::install_github('yihui/xaringan')
install.packages("xaringan")
install.packages("xaringan")
install.packages("xaringan")
WD <-  here::here()
knitr::opts_knit$set(root.dir = 'cur_dir')
getwd()
# 所有路径使用相对路径
library(here)
# 包含了dplyr和%>%等好用的包的集合
library(tidyverse)
# 所有路径使用相对路径
library(here)
# 包含了dplyr和%>%等好用的包的集合
library(tidyverse)
# 所有路径使用相对路径
library(here)
# 包含了dplyr和%>%等好用的包的集合
library(tidyverse)
# 所有路径使用相对路径
library(here)
# 包含了dplyr和%>%等好用的包的集合
library(tidyverse)
# 养成用相对路径的好习惯，便于其他人运行你的代码
WD <-  here::here()
getwd()
# 读取原始数据
df.raw <-  read.csv('../DATA/penguin_rawdata.csv',
header = T, sep=",", stringsAsFactors = FALSE)
# 康康原始数据长什么样
# 你不需要用DT::datatable，我只是为了PPT里好看
# 你可以直接点R Studio右边的环境变量来看，或者用str()或者head()
DT::datatable(head(df.raw, 10),
fillContainer = TRUE, options = list(pageLength = 3))
# 使用filter筛选出数据集中1995之后出生的被试
df.clean.filter <- df.raw %>%
dplyr::filter(.,age >= 1995)
# 看看筛选后的数据是不是只有95后
DT::datatable(head(df.clean.filter, 10),
fillContainer = TRUE, options = list(pageLength = 3))
# 使用select选择age和ALEX的所有题目
df.clean.select <- df.raw %>%
dplyr::select(age, starts_with("ALEX"), eatdrink, avoidance)
#笨一点的方法，就是把16个ALEX都写出来
# 看看其他变量是不是都消失了
DT::datatable(head(df.clean.select, 10),
fillContainer = TRUE, options = list(pageLength = 3))
# 把ALEX1 - 4求和
df.clean.mutate_1 <- df.raw %>%
dplyr::mutate(ALEX_SUM = ALEX1 + ALEX2 + ALEX3 + ALEX4)
# 看看是不是真的求和了
DT::datatable(head(df.clean.mutate_1, 10),
fillContainer = TRUE, options = list(pageLength = 3))
# 这个函数怎么运行的不重要，以后你只需要把ALEX改成你的文件里的变量名
df.clean.mutate_2 <- df.raw %>%
dplyr::mutate(ALEX_SUM = rowSums(select(., starts_with("ALEX"))))
DT::datatable(head(df.clean.mutate_2, 10),
fillContainer = TRUE, options = list(pageLength = 3))
df.clean.mutate_3 <- df.raw %>%
dplyr::mutate(decade = case_when(age <= 1969 ~ 60,
age >= 1970 & age <= 1979 ~ 70,
age >= 1980 & age <= 1989 ~ 80,
age >= 1990 & age <= 1999 ~ 90)
) #当括号多的时候注意括号的位置
DT::datatable(head(df.clean.mutate_3, 10),
fillContainer = TRUE, options = list(pageLength = 3))
df.clean.group_by <- df.clean.mutate_3 %>%
dplyr::group_by(.,decade) %>% # 根据eatdrink这个变量拆分文件，eatdrink包含几个水平，文件就会被拆分为几份
dplyr::summarise(mean_avoidance = mean(avoidance)) %>% # 计算eatdrink每个水平下，age=1999的有多少个
dplyr::ungroup()
# 拆分文件并不会让源文件产生任何视觉上的变化
DT::datatable(head(df.clean.group_by, 4),
fillContainer = TRUE, options = list(pageLength = 4))
df.clean <- df.raw %>%
dplyr::filter(eatdrink == 1) %>%
# 选择eatdrink为1的被试
dplyr::select(age, starts_with("ALEX"), eatdrink, avoidance) %>%
# 选择四个变量，分别是age，ALEX，eatdrink和avoidance
dplyr::mutate(ALEX_SUM = rowSums(select(., starts_with("ALEX"))),
# 把所有ALEX的题目分数求和
decade = case_when(age <= 1969 ~ 60,
age >= 1970 & age <= 1979 ~ 70,
age >= 1980 & age <= 1989 ~ 80,
age >= 1990 & age <= 1999 ~ 90)
# 把年龄按照年代来重新编码
) %>%
dplyr::group_by(decade) %>%
# 按照年代将数据拆分
dplyr::summarise(mean_ALEX = mean(ALEX_SUM)) %>%
# 计算每个年代的被试的平均的ALEX_SUM
dplyr::ungroup()
# 解除对数据的拆分
DT::datatable(head(df.clean, 5),
fillContainer = TRUE, options = list(pageLength = 5))
View(df.raw)
df.raw.long <- df.raw %>%
gather(key = "alex", value = "score", ALEX1:ALEX16)
View(df.raw.long)
df.raw.long <- df.raw %>%
gather(key = "ALEX", value = "score", ALEX1:ALEX16)
df.raw.long <- df.raw %>%
tidyr::pivot_longer(cols = ALEX1:ALEX16,
names_to = "alex",
values_to = "score")
View(df.raw)
df.raw.long$score
df.raw.long <- df.raw %>%
tidyr::pivot_longer(cols = ALEX1:ALEX16,
names_to = "ALEX",
values_to = "ALEX_score") %>%
dplyr::select(age, ALEX, ALEX_score)
DT::datatable(head(df.raw.long, 5),
fillContainer = TRUE, options = list(pageLength = 5))
df.raw.long <- df.raw %>%
tidyr::pivot_longer(cols = ALEX1:ALEX16,
names_to = "ALEX",
values_to = "ALEX_score") %>%
dplyr::select(age, ALEX, ALEX_score)
DT::datatable(head(df.raw.long, 10),
fillContainer = TRUE, options = list(pageLength = 3))
df.raw.long <- df.raw %>%
tidyr::pivot_longer(cols = ALEX1:ALEX16,
names_to = "ALEX",
values_to = "ALEX_score") %>%
dplyr::select(age, ALEX, ALEX_score)
DT::datatable(head(df.raw.long, 32),
fillContainer = TRUE, options = list(pageLength = 3))
df.raw.wide <- df.raw.long %>%
pivot_wider(names_from = "ALEX", values_from = "ALEX_score") %>%
dplyr::select(age, starts_with("ALEX"))
DT::datatable(head(df.raw.wide, 5),
fillContainer = TRUE, options = list(pageLength = 5))
df.raw.wide <- df.raw.long %>%
pivot_wider(names_from = "ALEX", values_from = "ALEX_score")
DT::datatable(head(df.raw.wide, 5),
fillContainer = TRUE, options = list(pageLength = 5))
df.raw.long <- df.raw %>%
tidyr::pivot_longer(cols = ALEX1:ALEX16,
names_to = "ALEX",
values_to = "ALEX_score") %>%
dplyr::select(age, ALEX, ALEX_score)
DT::datatable(head(df.raw.long, 32),
fillContainer = TRUE, options = list(pageLength = 3))
View(df.raw.long)
df.raw.wide <- df.raw.long %>%
pivot_wider(names_from = "ALEX", values_from = "ALEX_score")  %>%
dplyr::select(age, starts_with("ALEX"))
DT::datatable(head(df.raw.wide, 5),
fillContainer = TRUE, options = list(pageLength = 5))
df.raw.wide <- df.raw.long %>%
pivot_wider(names_from = "ALEX", values_from = "ALEX_score")  %>%
dplyr::select(age, starts_with("ALEX"))
DT::datatable(head(df.raw.wide, 10),
fillContainer = TRUE, options = list(pageLength = 3))
df.raw.long <- df.raw %>%
tidyr::pivot_longer(cols = ALEX1:ALEX16,
names_to = "ALEX",
values_to = "ALEX_score") %>%
dplyr::ungroup() %>%
dplyr::select(age, ALEX, ALEX_score)
DT::datatable(head(df.raw.long, 32),
fillContainer = TRUE, options = list(pageLength = 3))
df.raw.wide <- df.raw.long %>%
pivot_wider(names_from = "ALEX", values_from = "ALEX_score")  %>%
dplyr::select(age, starts_with("ALEX"))
DT::datatable(head(df.raw.wide, 10),
fillContainer = TRUE, options = list(pageLength = 3))
df.raw.long <- df.raw %>%
tidyr::pivot_longer(cols = ALEX1:ALEX16,
names_to = "ALEX",
values_to = "ALEX_score")
DT::datatable(head(df.raw.long, 32),
fillContainer = TRUE, options = list(pageLength = 3))
df.raw.wide <- df.raw.long %>%
pivot_wider(names_from = "ALEX", values_from = "ALEX_score")  %>%
dplyr::select(age, starts_with("ALEX"))
DT::datatable(head(df.raw.wide, 10),
fillContainer = TRUE, options = list(pageLength = 3))
df.raw.wide <- df.raw.long %>%
pivot_wider(names_from = "ALEX", values_from = "ALEX_score")
DT::datatable(head(df.raw.wide, 10),
fillContainer = TRUE, options = list(pageLength = 3))
df.raw.long <- df.raw %>%
tidyr::pivot_longer(cols = ALEX1:ALEX16,
names_to = "ALEX",
values_to = "ALEX_score") %>%
dplyr::select(ALEX, ALEX_score, everything())
DT::datatable(head(df.raw.long, 32),
fillContainer = TRUE, options = list(pageLength = 3))
df.raw.long <- df.raw %>%
tidyr::pivot_longer(cols = ALEX1:ALEX16,
names_to = "ALEX",
values_to = "ALEX_score") %>%
dplyr::select(age, ALEX, ALEX_score, everything())
DT::datatable(head(df.raw.long, 32),
fillContainer = TRUE, options = list(pageLength = 3))
df.raw.wide <- df.raw.long %>%
pivot_wider(names_from = "ALEX", values_from = "ALEX_score")  %>%
dplyr::select(age, starts_with("ALEX"), everything(()))
df.raw.wide <- df.raw.long %>%
pivot_wider(names_from = "ALEX", values_from = "ALEX_score")  %>%
dplyr::select(age, starts_with("ALEX"), everything())
DT::datatable(head(df.raw.wide, 10),
fillContainer = TRUE, options = list(pageLength = 3))
# 读取原始数据
df.mt.raw <-  read.csv('../DATA/MS_rep_matchingTask_raw.csv',
header = T, sep=",", stringsAsFactors = FALSE)
# 康康原始数据长什么样
# 你不需要用DT::datatable，我只是为了PPT里好看
# 你可以直接点R Studio右边的环境变量来看，或者用str()或者head()
DT::datatable(head(df.mt.raw, 10),
fillContainer = TRUE, options = list(pageLength = 3))
# 所有路径使用相对路径
library(here)
# 包含了dplyr和%>%等好用的包的集合
library(tidyverse)
# 养成用相对路径的好习惯，便于其他人运行你的代码
WD <-  here::here()
getwd()
# 读取原始数据
df.pg.raw <-  read.csv('../DATA/penguin_rawdata.csv',
header = T, sep=",", stringsAsFactors = FALSE)
# 康康原始数据长什么样
# 你不需要用DT::datatable，我只是为了PPT里好看
# 你可以直接点R Studio右边的环境变量来看，或者用str()或者head()
DT::datatable(head(df.pg.raw, 10),
fillContainer = TRUE, options = list(pageLength = 3))
# 读取原始数据
df.mt.raw <-  read.csv('../DATA/MS_rep_matchingTask_raw.csv',
header = T, sep=",", stringsAsFactors = FALSE)
# 康康原始数据长什么样
# 你不需要用DT::datatable，我只是为了PPT里好看
# 你可以直接点R Studio右边的环境变量来看，或者用str()或者head()
DT::datatable(head(df.mt.raw, 10),
fillContainer = TRUE, options = list(pageLength = 3))
# 使用filter筛选出数据集中1995之后出生的被试
df.clean.filter <- df.pg.raw %>%
dplyr::filter(.,age >= 1995)
# 看看筛选后的数据是不是只有95后
DT::datatable(head(df.clean.filter, 10),
fillContainer = TRUE, options = list(pageLength = 3))
# 使用select选择age和ALEX的所有题目
df.clean.select <- df.pg.raw %>%
dplyr::select(age, starts_with("ALEX"), eatdrink, avoidance)
#笨一点的方法，就是把16个ALEX都写出来
# 看看其他变量是不是都消失了
DT::datatable(head(df.clean.select, 10),
fillContainer = TRUE, options = list(pageLength = 3))
# 把ALEX1 - 4求和
df.clean.mutate_1 <- df.pg.raw %>%
dplyr::mutate(ALEX_SUM = ALEX1 + ALEX2 + ALEX3 + ALEX4)
# 看看是不是真的求和了
DT::datatable(head(df.clean.mutate_1, 10),
fillContainer = TRUE, options = list(pageLength = 3))
# 这个函数怎么运行的不重要，以后你只需要把ALEX改成你的文件里的变量名
df.clean.mutate_2 <- df.pg.raw %>%
dplyr::mutate(ALEX_SUM = rowSums(select(., starts_with("ALEX"))))
DT::datatable(head(df.clean.mutate_2, 10),
fillContainer = TRUE, options = list(pageLength = 3))
df.clean.mutate_3 <- df.pg.raw %>%
dplyr::mutate(decade = case_when(age <= 1969 ~ 60,
age >= 1970 & age <= 1979 ~ 70,
age >= 1980 & age <= 1989 ~ 80,
age >= 1990 & age <= 1999 ~ 90)
) #当括号多的时候注意括号的位置
DT::datatable(head(df.clean.mutate_3, 10),
fillContainer = TRUE, options = list(pageLength = 3))
df.clean.group_by <- df.clean.mutate_3 %>%
dplyr::group_by(.,decade) %>% # 根据eatdrink这个变量拆分文件，eatdrink包含几个水平，文件就会被拆分为几份
dplyr::summarise(mean_avoidance = mean(avoidance)) %>% # 计算eatdrink每个水平下，age=1999的有多少个
dplyr::ungroup()
# 拆分文件并不会让源文件产生任何视觉上的变化
DT::datatable(head(df.clean.group_by, 4),
fillContainer = TRUE, options = list(pageLength = 4))
df.clean <- df.pg.raw %>%
dplyr::filter(eatdrink == 1) %>%
# 选择eatdrink为1的被试
dplyr::select(age, starts_with("ALEX"), eatdrink, avoidance) %>%
# 选择四个变量，分别是age，ALEX，eatdrink和avoidance
dplyr::mutate(ALEX_SUM = rowSums(select(., starts_with("ALEX"))),
# 把所有ALEX的题目分数求和
decade = case_when(age <= 1969 ~ 60,
age >= 1970 & age <= 1979 ~ 70,
age >= 1980 & age <= 1989 ~ 80,
age >= 1990 & age <= 1999 ~ 90)
# 把年龄按照年代来重新编码
) %>%
dplyr::group_by(decade) %>%
# 按照年代将数据拆分
dplyr::summarise(mean_ALEX = mean(ALEX_SUM)) %>%
# 计算每个年代的被试的平均的ALEX_SUM
dplyr::ungroup()
# 解除对数据的拆分
df.pg.clean <- df.pg.raw %>%
dplyr::filter(eatdrink == 1) %>%
# 选择eatdrink为1的被试
dplyr::select(age, starts_with("ALEX"), eatdrink, avoidance) %>%
# 选择四个变量，分别是age，ALEX，eatdrink和avoidance
dplyr::mutate(ALEX_SUM = rowSums(select(., starts_with("ALEX"))),
# 把所有ALEX的题目分数求和
decade = case_when(age <= 1969 ~ 60,
age >= 1970 & age <= 1979 ~ 70,
age >= 1980 & age <= 1989 ~ 80,
age >= 1990 & age <= 1999 ~ 90)
# 把年龄按照年代来重新编码
) %>%
dplyr::group_by(decade) %>%
# 按照年代将数据拆分
dplyr::summarise(mean_ALEX = mean(ALEX_SUM)) %>%
# 计算每个年代的被试的平均的ALEX_SUM
dplyr::ungroup()
# 解除对数据的拆分
DT::datatable(head(df.pg.clean, 5),
fillContainer = TRUE, options = list(pageLength = 5))
df.raw.long <- df.pg.raw %>%
tidyr::pivot_longer(cols = ALEX1:ALEX16,
names_to = "ALEX",
values_to = "ALEX_score") %>%
dplyr::select(age, ALEX, ALEX_score, everything())
# 因为新生成的变量会放在最后几列
# everything() 可以让其他变量保持原有顺序不变
# 仅让你想要看的变量提前
DT::datatable(head(df.raw.long, 32),
fillContainer = TRUE, options = list(pageLength = 3))
df.raw.wide <- df.raw.long %>%
tidyr::pivot_wider(names_from = "ALEX", values_from = "ALEX_score")  %>%
dplyr::select(age, starts_with("ALEX"), everything())
DT::datatable(head(df.raw.wide, 10),
fillContainer = TRUE, options = list(pageLength = 3))
rm(df.clean)
View(df.pg.raw)
View(df.mt.raw)
df.clean.separate <- df.mt.raw %>%
tidyr::separate(., col = Shape, into = c("Shape_moral", "Shape_self"), sep = "(?<=moral|immoral)(?=Self|Other)")
```
df.clean.separate <- df.mt.raw %>%
tidyr::separate(., col = Shape, into = c("Shape_moral", "Shape_self"), sep = "(?<=moral|immoral)(?=Self|Other)")
View(df.clean.separate)
df.clean.separate <- df.mt.raw %>%
tidyr::separate(., col = Shape, into = c("Shape_moral", "Shape_self"), sep = "(?<=moral|immoral)(?=Self|Other)") %>%
tidyr::separate(., col = Label, into = c("Label_moral", "Label_self"), sep = "(?<=moral|immoral)(?=Self|Other)") %>%
df.clean.separate <- df.mt.raw %>%
tidyr::separate(., col = Shape, into = c("Shape_moral", "Shape_self"), sep = "(?<=moral|immoral)(?=Self|Other)") %>%
tidyr::separate(., col = Label, into = c("Label_moral", "Label_self"), sep = "(?<=moral|immoral)(?=Self|Other)")
df.clean.separate <- df.mt.raw %>%
tidyr::separate(., col = Shape, into = c("Shape_moral", "Shape_self"), sep = "(?<=moral|immoral)(?=Self|Other)") %>%
tidyr::separate(., col = Label, into = c("Label_moral", "Label_self"), sep = "(?<=moral|immoral)(?=Self|Other)") %>%
dplyr::select(Subject, Shape_moral, Shape_self, Label_moral, Label_self, everything())
df.clean.separate <- df.mt.raw %>%
tidyr::separate(., col = Shape, into = c("Shape_moral", "Shape_self"), sep = "(?<=moral|immoral)(?=Self|Other)") %>%
tidyr::separate(., col = Label, into = c("Label_moral", "Label_self"), sep = "(?<=moral|immoral)(?=Self|Other)") %>%
dplyr::select(Subject, Shape_moral, Shape_self, Label_moral, Label_self, everything())
DT::datatable(head(df.clean.separate, 5),
fillContainer = TRUE, options = list(pageLength = 5))
df.clean.wide <- df.mt.raw %>%
tidyr::pivot_wider(names_from = "Trial", values_from = "RT")  %>%
df.clean.wide <- df.mt.raw %>%
tidyr::pivot_wider(names_from = "Trial", values_from = "RT")
View(df.clean.wide)
df.clean.wide <- df.mt.raw %>%
dplyr::select(Subject, Trial, RT) %>%
tidyr::pivot_wider(names_from = "Trial", values_from = "RT")
df.clean.wide <- df.mt.raw %>%
dplyr::select(Subject, Bin, Trial, RT) %>%
tidyr::pivot_wider(names_from = "Trial", values_from = "RT")
df.clean.wide <- df.mt.raw %>%
dplyr::select(Subject, Bin, Trial, RT)
df.clean.wide <- df.mt.raw %>%
dplyr::select(Subject, Bin, Trial, RT) %>%
tidyr::pivot_wider(names_from = "Trial", values_from = "RT")
df.clean.wide <- df.mt.raw %>%
dplyr::select(Subject, Block, Bin, Trial, RT) %>%
tidyr::pivot_wider(names_from = "Trial", values_from = "RT")
DT::datatable(head(df.clean.wide, 10),
fillContainer = TRUE, options = list(pageLength = 3))
df.clean.wide <- df.mt.raw %>%
dplyr::select(Subject, Block, Bin, Trial, RT) %>%
tidyr::pivot_wider(names_from = "Trial", values_from = "RT")
df.clean.long <- df.clean.wide %>%
tidyr::pivot_longer(cols = 4:27,
names_to = "Trial",
values_to = "RT")
DT::datatable(head(df.clean.long, 10),
fillContainer = TRUE, options = list(pageLength = 3))
DT::datatable(head(df.clean.long, 24),
fillContainer = TRUE, options = list(pageLength = 3))
DT::datatable(head(df.clean.long, 48),
fillContainer = TRUE, options = list(pageLength = 3))
df.clean.extract <- df.mt.raw %>%
tidyr::extract(Shape, into = c("Shape_moral", "Shape_self"),
regex = "(moral|immoral)(Self|Other)", remove = FALSE) %>%
tidyr::extract(Label, into = c("Label_moral", "Label_self"),
regex = "(moral|immoral)(Self|Other)", remove = FALSE) %>%
dplyr::select(Subject, Shape_moral, Shape_self, Label_moral, Label_self, everything())
DT::datatable(head(df.clean.extract, 10),
fillContainer = TRUE, options = list(pageLength = 3))
View(df.clean.extract)
View(df.clean.separate)
df.clean.unite <- df.clean.separate %>%
tidyr::unite(Shape, Shape_moral, Shape_self, sep = "") %>%
tidyr::unite(Label, Label_moral, Label_self, sep = "")
DT::datatable(head(df.clean.unite, 10),
fillContainer = TRUE, options = list(pageLength = 3))
```
DT::datatable(head(df.clean.unite, 10),
fillContainer = TRUE, options = list(pageLength = 3))
