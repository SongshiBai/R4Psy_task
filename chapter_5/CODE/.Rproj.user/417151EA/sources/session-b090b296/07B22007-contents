---
title: ""
subtitle: ""
author: ""
institute: ""
date: ""
output:
  xaringan::moon_reader:
    css: [default, zh-CN.css, line_space.css]
    lib_dir: libs
    nature:
      highlightStyle: github
      highlightLines: true
      countIncrementalSlides: false
---
class: center, middle
<span style="font-size: 60px;">第五章</span> <br>
<span style="font-size: 50px;">如何清理数据 二 数据的预处理</span> <br>

<span style="font-size: 30px;">How to use dplyr</span> <br>
<span style="font-size: 30px;">胡传鹏</span> <br>
<span style="font-size: 30px;">PPT: yuki</span> <br>
<span style="font-size: 30px;">2023/02/22</span> <br>

---
# 5.1 数据预处理准备
## dplyr
<br>

dplyr is a grammar of data manipulation, providing a consistent set of verbs that help you solve the most common data manipulation challenges: <br>

<br>

<img src="https://dplyr.tidyverse.org/logo.png" alt="dplyr" style="display: block; margin: 0 auto;">
---
# 5.1 数据预处理准备
## dplyr::functions
- filter() 选择符合某个条件的行（可能代表被试） <br>

- mutate() 生成新的变量 <br>

- group_by() 依据某些变量产生的条件，给数据分组 <br>
  **如果你使用了 "group_by",** <br>
  **一定要在summarise后使用 "ungroup".** <br>
  
- summarise() 进行某些加减乘除的运算 <br>  

- ungroup() 取消刚刚进行的分组 <br>  

- select() 选择最终进行分析时需要用到的变量，同时也起到了为所有变量排序的功能 <br>

- arrange() 某一列的值，按照某个顺序排列（其他列也会随之变动） <br>

_当你清洗数据时，也基本上会按照这个顺序来使用_
  
---
# 5.1 数据预处理准备
## 载入包
```{r used pacakge, warning = FALSE}
# 所有路径使用相对路径
library(here)
# 包含了dplyr和%>%等好用的包的集合
library(tidyverse)
```

---
# 5.1 数据预处理准备
## 设置工作路径
```{r Set Working Directory}
# 养成用相对路径的好习惯，便于其他人运行你的代码
WD <-  here::here()
getwd()
```

---
# 5.1 数据预处理准备
## 读取原始数据
```{r Read RawData}
# 读取原始数据
df.raw <-  read.csv('../DATA/penguin_rawdata.csv',
                    header = T, sep=",", stringsAsFactors = FALSE) 

# 康康原始数据长什么样
# 你不需要用DT::datatable，我只是为了PPT里好看
# 你可以直接点R Studio右边的环境变量来看，或者用str()或者head()
DT::datatable(head(df.raw, 10),
              fillContainer = TRUE, options = list(pageLength = 3))
```

---
class: center, middle
# 接下来就要正式讲dplyr了
## 准备好了吗
<img src="https://dplyr.tidyverse.org/logo.png" alt="dplyr" style="display: block; margin: 0 auto;">
<br>
_我会在标题中写出这个过程对应的SPSS名称_
---
# 5.2 数据预处理的基本操作
## dplyr::filter 
### 选择个案 
```{r example of filter}
# 使用filter筛选出数据集中1995之后出生的被试
df.clean.filter <- df.raw %>%
  dplyr::filter(.,age >= 1995)

# 看看筛选后的数据是不是只有95后
DT::datatable(head(df.clean.filter, 10),
              fillContainer = TRUE, options = list(pageLength = 3))
```

---
# 5.2 数据预处理的基本操作
## dplyr::select
### 选择变量
```{r example of select}
# 使用select选择age和ALEX的所有题目
df.clean.select <- df.raw %>%
  dplyr::select(age, starts_with("ALEX"), eatdrink, avoidance)
#笨一点的方法，就是把16个ALEX都写出来

# 看看其他变量是不是都消失了
DT::datatable(head(df.clean.select, 10),
              fillContainer = TRUE, options = list(pageLength = 3))
```

---
# 5.2 数据预处理的基本操作
## dplyr::mutate 
### 计算变量 方法1
```{r example of mutate_1}
# 把ALEX1 - 4求和
df.clean.mutate_1 <- df.raw %>% 
  dplyr::mutate(ALEX_SUM = ALEX1 + ALEX2 + ALEX3 + ALEX4)

# 看看是不是真的求和了
DT::datatable(head(df.clean.mutate_1, 10),
              fillContainer = TRUE, options = list(pageLength = 3))
```

---
# 5.2 数据预处理的基本操作
## dplyr::mutate 
### 计算变量 方法2 ~~chatGPT告诉我的~~
```{r example of mutate_2}
# 这个函数怎么运行的不重要，以后你只需要把ALEX改成你的文件里的变量名
df.clean.mutate_2 <- df.raw %>% 
  dplyr::mutate(ALEX_SUM = rowSums(select(., starts_with("ALEX"))))

DT::datatable(head(df.clean.mutate_2, 10),
              fillContainer = TRUE, options = list(pageLength = 3))
```

---
# 5.2 数据预处理的基本操作
## dplyr::mutate 
### 重新编码为不同变量
```{r example of mutate_3}
df.clean.mutate_3 <- df.raw %>% 
  dplyr::mutate(decade = case_when(age <= 1969 ~ 60,
                                   age >= 1970 & age <= 1979 ~ 70,
                                   age >= 1980 & age <= 1989 ~ 80,
                                   age >= 1990 & age <= 1999 ~ 90)
                ) #当括号多的时候注意括号的位置

DT::datatable(head(df.clean.mutate_3, 10),
              fillContainer = TRUE, options = list(pageLength = 3))
```

---
# 5.2 数据预处理的基本操作
## dplyr::group_by & summarise
### 拆分文件 分组计算
```{r example of group_by}
df.clean.group_by <- df.clean.mutate_3 %>%
  dplyr::group_by(.,decade) %>% # 根据eatdrink这个变量拆分文件，eatdrink包含几个水平，文件就会被拆分为几份
  dplyr::summarise(mean_avoidance = mean(avoidance)) %>% # 计算eatdrink每个水平下，age=1999的有多少个
  dplyr::ungroup()

# 拆分文件并不会让源文件产生任何视觉上的变化
DT::datatable(head(df.clean.group_by, 4),
              fillContainer = TRUE, options = list(pageLength = 4))
```

---
# 5.2 数据预处理的基本操作
## dplyr::functions
### 把之前学到的函数一起使用
```{r example of total}
df.clean <- df.raw %>%
  dplyr::filter(eatdrink == 1) %>% 
  # 选择eatdrink为1的被试
  dplyr::select(age, starts_with("ALEX"), eatdrink, avoidance) %>%
  # 选择四个变量，分别是age，ALEX，eatdrink和avoidance
  dplyr::mutate(ALEX_SUM = rowSums(select(., starts_with("ALEX"))),
                # 把所有ALEX的题目分数求和
                decade = case_when(age <= 1969 ~ 60,
                                   age >= 1970 & age <= 1979 ~ 70,
                                   age >= 1980 & age <= 1989 ~ 80,
                                   age >= 1990 & age <= 1999 ~ 90)
                # 把年龄按照年代来重新编码
                ) %>%
  dplyr::group_by(decade) %>%
  # 按照年代将数据拆分
  dplyr::summarise(mean_ALEX = mean(ALEX_SUM)) %>%
  # 计算每个年代的被试的平均的ALEX_SUM
  dplyr::ungroup()
  # 解除对数据的拆分
```

---
# 5.2 数据预处理的基本操作
## dplyr::functions
### 把之前学到的函数一起使用
```{r result of total}
DT::datatable(head(df.clean, 5),
              fillContainer = TRUE, options = list(pageLength = 5))
```






